import com.codeborne.selenide.*;
import org.openqa.selenium.By;
import javax.swing.JOptionPane;

import static com.codeborne.selenide.CollectionCondition.sizeGreaterThan;
import static com.codeborne.selenide.Selenide.*;
import static com.codeborne.selenide.Condition.*;
import com.codeborne.selenide.WebDriverRunner;

import java.util.ArrayList;
import java.util.List;

public class Andmekoguja {
    private static String pealehtURL = "https://nami-nami.ee/";
    //private static List<Retsept> retseptid = new ArrayList<>();
    private static String vaikemenüüURL = "https://nami-nami.ee/otsi//?recipe_page=1&news_page=1&string=&type=2&occasion=&country=&method=";
    private static List<String> leitudRetseptid = new ArrayList<>();

    /*public List<Retsept> getRetseptid() {
        return retseptid;
    }*/

    public static List<String> getLeitudRetseptid() {
        return leitudRetseptid;
    }

    public static String getVaikemenüüURL() {
        return vaikemenüüURL;
    }

    private static void avaVeeileht() {
        //Configuration.headless = true; // me ei näe kuidas programm aknaid avab
        if (WebDriverRunner.hasWebDriverStarted()) {
            WebDriverRunner.closeWindow();
        }
        Selenide.open(pealehtURL);
        Selenide.sleep(2000);
        lubaKüpsised();
    }

    private static void kasutaDetailsetOtsingut(String toiduaine) {
        // valime 'Detailsem otsing' ja sisestame otsitava toiduaine
        $(By.id("search-extend")).scrollIntoView(true).shouldBe(visible).click();
        SelenideElement koostisosadSisend = $("input[placeholder='Koostisosad']")
                .shouldBe(visible, enabled);
        koostisosadSisend.click();
        koostisosadSisend.setValue(toiduaine); // kirjutame toiduaine nimetuse otsingu kasti
    }

    private static void teeValikRippmenüüst() {
        // arvestades rippmenüüs pakutavat, täpsustame kasutaja soovi
        ElementsCollection rippmenüü = null;
        for (int i = 0; i < 50; i++) {
            rippmenüü = $$("li.select2-results__option");

            if (rippmenüü.get(0).getText().equals("Otsin…")) sleep(500);
            else break;
        }

        if (rippmenüü.size() == 1) {
            SelenideElement vaikevalik = rippmenüü.get(0);
            vaikevalik.scrollIntoView(true);
            vaikevalik.click();
        } else {
            SelenideElement kasutajaValik = rippmenüü.get(KasutajagaSuhtlemine.täpsustaKoostisosa(rippmenüü));
            kasutajaValik.scrollIntoView(true);
            kasutajaValik.click();
        }
    }

    public static String otsiKoostisosaJärgi(String toiduaine) {
        if (toiduaine.equals("q")) return "q";
        if (toiduaine.length() < 3) return "u";

        avaVeeileht();
        kasutaDetailsetOtsingut(toiduaine);
        teeValikRippmenüüst();

        $(".btn-orange.btn-block.btn-lg").click(); // vajutame 'otsi' nupule

        return WebDriverRunner.getWebDriver().getCurrentUrl();
    }


    private static void vajutaKuvaRohkem(int n) {
        // vajutame korduvalt 'kuva rohkem tulemusi' nuppu
        SelenideElement kuvaRohkem = null;
        for (int i = 0; i < n; i++) {
            kuvaRohkem = $("#more_recipes");
            if (!kuvaRohkem.exists() || !kuvaRohkem.isDisplayed()) break;
            sleep(500);
            if (!kuvaRohkem.isDisplayed()) break;
            try {
                kuvaRohkem.scrollIntoView(true).shouldBe(visible).click();
                sleep(500);
            } catch (Exception e) {
                System.out.println("viga kuva rohkem vajutamisel");
                e.printStackTrace();
            }
        }
    }

    public static Retsept valiJuhuslikRetsept(String url, String toiduaine){ // argumendiks olev url peab viitama retseptide menüüle
        String retseptiUrl = "";

        if (leitudRetseptid.isEmpty()) { // kui otsime antud toiduaine jaoks retsepti esimest korda
            //vajutaKuvaRohkem(10);

            ElementsCollection nähtavadRetseptid = $$("div.recipe_brick section.item-link a");
            for (SelenideElement i : nähtavadRetseptid) {
                //System.out.println(i.getText());
                String link = (i.getAttribute("href"));
                if (link != null) leitudRetseptid.add( i.getAttribute("href"));
            }

            if (leitudRetseptid.isEmpty()) {
                System.out.println("ühtegi retsepti ei leitud");
                return null;
            }
        }

        int juhuslikNumber = new java.util.Random().nextInt(leitudRetseptid.size());
        retseptiUrl = leitudRetseptid.get(juhuslikNumber);

        Retsept retsept = loeRetseptiAndmed(retseptiUrl);
        return retsept;
    }

    public static Retsept loeRetseptiAndmed(String url){
        open(url);
        sleep(500);
        String pealkiri = $("h1.title").shouldBe(visible).getText();
        ElementsCollection koostisosad = $$("section.block.text-center");
        SelenideElement valmistamine = $$("section.block")
                .filterBy(attribute("class", "block"))
                .first();
        ElementsCollection juhised = valmistamine.$$("p");

        Retsept retsept = new Retsept(pealkiri, url, koostisosad, juhised);
        //retseptid.add(retsept);
        return retsept;
    }

    private static void lubaKüpsised() {
        try {
            SelenideElement terms = Selenide.$(By.id("cookie-consent-btn-accept-all"));
            if (terms.exists() && terms.isDisplayed()) terms.click();
        } catch (Exception e) {}
    }

    public static void lõpeta(){
        closeWebDriver();
    }
}
